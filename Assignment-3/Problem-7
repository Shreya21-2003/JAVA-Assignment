class BankAccount {
    private int balance = 1000; // Initial balance

    public void deposit(int amount, String threadName) {
        System.out.println(threadName + " is trying to deposit $" + amount);

        synchronized (this) {
            int newBalance = balance + amount;
            System.out.println(threadName + " calculated new balance: $" + newBalance);

            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println(threadName + " interrupted during deposit.");
            }

            balance = newBalance;
            System.out.println(threadName + " completed deposit. Updated Balance: $" + balance);
        }
    }

    public int getBalance() {
        return balance;
    }
}

class DepositThread extends Thread {
    private BankAccount account;
    private int amount;
    private String threadName;

    public DepositThread(BankAccount account, int amount, String name) {
        this.account = account;
        this.amount = amount;
        this.threadName = name;
    }

    @Override
    public void run() {
        account.deposit(amount, threadName);
    }
}

public class Main {
    public static void main(String[] args) {
        BankAccount account = new BankAccount(); 

        DepositThread t1 = new DepositThread(account, 500, "Thread 1");
        DepositThread t2 = new DepositThread(account, 700, "Thread 2");

        t1.start();
        t2.start();

        try {
            t1.join();
            t2.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Final Balance: $" + account.getBalance());
    }
}
