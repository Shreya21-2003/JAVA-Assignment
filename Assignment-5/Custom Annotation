import java.lang.annotation.*;
import java.lang.reflect.Method;

@Retention(RetentionPolicy.RUNTIME) 
@Target(ElementType.METHOD)        
@interface LogExecutionTime {}

class Task {
    @LogExecutionTime
    public void performTask() {
        System.out.println("Task started...");
        try {
            Thread.sleep(1000); 
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Task completed.");
    }
}

public class AnnotationProcessor {
    public static void main(String[] args) throws Exception {
        Task task = new Task();
        Method method = Task.class.getMethod("performTask");

        if (method.isAnnotationPresent(LogExecutionTime.class)) {
            long startTime = System.currentTimeMillis();
            
            method.invoke(task); // Call the annotated method
            
            long endTime = System.currentTimeMillis();
            System.out.println("Execution Time: " + (endTime - startTime) + "ms");
        } else {
            System.out.println("Annotation not present.");
        }
    }
}
